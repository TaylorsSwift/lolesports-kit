{"name":"eSports Kit","tagline":"Swift API for LoL eSports (lolesports.com API)","body":"# eSports Kit\r\n\r\nLeague of Legends eSports iOS client library for acessing the lolesports.com REST API\r\n\r\n## Info\r\n\r\nThis library was initially created for an iPhone app I created during a hackathon. Because the app didn't make use the whole lolesports.com API, a lot of the endpoints are missing. With that said this is currently a work in progress, and will support all the endpoints soon.\r\n\r\n## Usage\r\n\r\nOnce the project is complete, it will be available via cocoapods. For now, add it directly to your own project.\r\n\r\n## Examples\r\n\r\n```swift\r\n// Get Leagues\r\nLolEsportsClient.sharedInstance().getLeagues(published: LolEsportsClient.Published.No) {\r\n    (leagues, error) -> Void in\r\n    // handle the response or error\r\n}\r\n\r\n// Get Leagues - default to published only\r\nLolEsportsClient.sharedInstance().getLeagues() {\r\n    (leagues, error) -> Void in\r\n    // handle the response or error\r\n}\r\n\r\n// Get Series\r\nLolEsportsClient.sharedInstance().getSeries { \r\n    (series, error) -> Void in\r\n    // handle the response or error\r\n}\r\n\r\n// Get Schedule\r\nlet tournamentId: Int = 226\r\nLolEsportsClient.sharedInstance().getSchedule(tournamentId, includeFinished: false, includeFuture: true, includeLive: false) { \r\n    (matches, error) -> Void in\r\n    // handle the response or error\r\n}\r\n\r\n// Get Schedule - default to include finished, future, and live matches\r\nlet tournamentId: Int = 226\r\nLolEsportsClient.sharedInstance().getSchedule(tournamentId) { \r\n    (matches, error) -> Void in\r\n    // handle the response or error\r\n}\r\n\r\n// Get Standings\r\nlet tournamentId: Int = 226\r\nLolEsportsClient.sharedInstance().getStandings(tournamentId) { \r\n    (standings, error) -> Void in\r\n    // handle the response or error\r\n}\r\n\r\n// Get Tournaments\r\nLolEsportsClient.sharedInstance().getTournaments(published: LolEsportsClient.Published.No) { \r\n    (tournaments, error) -> Void in\r\n    // handle the response or error\r\n}\r\n\r\n//Get Tournaments - default to published only\r\nLolEsportsClient.sharedInstance().getTournaments() { \r\n    (tournaments, error) -> Void in\r\n    // handle the response or error\r\n}\r\n\r\n// Get News\r\nLolEsportsClient.sharedInstance().getNews(limit: 10, offset: 0, published: LolEsportsClient.Published.No) { \r\n    (news, error) -> Void in\r\n    // handle the response or error\r\n}\r\n\r\n// Get News - default to published only\r\nLolEsportsClient.sharedInstance().getNews { \r\n    (news, error) -> Void in\r\n    // handle the response or error\r\n}\r\n\r\n// Get Stat Leaders\r\nlet tournamentId = 226\r\nLolEsportsClient.sharedInstance().getStatLeaders(LolEsportsClient.Stat.Kills, tournamentId: tournamentId) { \r\n    (statLeaders, error) -> Void in\r\n    // handle the response or error\r\n}\r\n\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}